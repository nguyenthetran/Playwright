import asyncio
import os
import re
from pathlib import Path
from playwright.async_api import async_playwright, TimeoutError as PWTimeoutError

# === C·∫§U H√åNH C∆† B·∫¢N ===
HEADLESS = False
SLOW_MO = 0  # ms (tƒÉng n·∫øu mu·ªën xem ch·∫≠m)
VIDEO_DIR = Path("videos")          # th∆∞ m·ª•c l∆∞u video
VIDEO_SIZE = {"width": 1280, "height": 720}  # k√≠ch th∆∞·ªõc video
UPLOAD_FILE = Path(r"massupload_basic_product_template (17).xlsx")  # ƒë·ªïi sang ƒë∆∞·ªùng d·∫´n th·∫≠t n·∫øu c·∫ßn

async def main():
    # ƒê·∫£m b·∫£o th∆∞ m·ª•c video t·ªìn t·∫°i
    VIDEO_DIR.mkdir(parents=True, exist_ok=True)

    async with async_playwright() as p:
        browser = await p.chromium.launch(headless=HEADLESS, slow_mo=SLOW_MO)

        # record_video ƒë∆∞·ª£c b·∫≠t ·ªü m·ª©c context => m·ªói page s·∫Ω c√≥ 1 file .webm
        context = await browser.new_context(
            record_video_dir=str(VIDEO_DIR),
            record_video_size=VIDEO_SIZE,
            viewport={"width": 1366, "height": 768},
        )

        page = await context.new_page()

        try:
            # === LOGIN ===
            await page.goto("https://predev-seller-center.amaze-x.com/auth/sign-in")
            await page.locator("span").filter(has_text="ThaiLanTH").click()
            await page.get_by_text("United StatesEN").click()
            await page.get_by_role("textbox", name="Email/Phone Number/Username").fill("Adgjl123")
            await page.get_by_role("textbox", name="Password").fill("Adgjl123")
            await page.get_by_role("button", name="Sign In").click()
            await page.wait_for_load_state("networkidle")

            # === OPEN MASS UPLOAD PAGE ===
            await page.get_by_text(re.compile(r"^My Products")).click()
            await page.get_by_role("button", name="Batch Update").click()

            async with page.expect_popup() as popup_info:
                await page.get_by_role("link", name="Mass Upload Product").click()
            page1 = await popup_info.value
            await page1.wait_for_load_state("domcontentloaded")

            # === UPLOAD FILE ===
            await page1.get_by_role("tab", name="Upload File").click()

            # N·∫øu file ·ªü c√πng th∆∞ m·ª•c script, chuy·ªÉn sang absolute path ƒë·ªÉ ch·∫Øc ch·∫Øn
            file_path = str(UPLOAD_FILE.resolve())
            if not os.path.exists(file_path):
                raise FileNotFoundError(f"Kh√¥ng t√¨m th·∫•y file upload: {file_path}")

            async with page1.expect_file_chooser() as fc_info:
                await page1.get_by_role("button", name="Select File", exact=True).click()
            file_chooser = await fc_info.value
            await file_chooser.set_files(file_path)

            # Nh·∫•n Upload
            await page1.get_by_role("button", name=re.compile(r"^Upload(s)?$", re.I)).click()

            # === L·∫§Y POPUP TH√îNG B√ÅO ===
            try:
                toast = page1.locator('[role="alert"], .ant-notification-notice').first
                await toast.wait_for(state="visible", timeout=10_000)
                msg = (await toast.inner_text()).strip()

                print("\n==========================")
                print("üì¢ POPUP MESSAGE:")
                print(msg)
                print("==========================")

                if re.search(r"success", msg, re.I):
                    print("‚úÖ RESULT: PASS ‚Äî File uploaded successfully.")
                elif re.search(r"only xlsx|csv", msg, re.I):
                    print("‚ùå RESULT: FAIL ‚Äî Wrong file type.")
                else:
                    print("‚ö†Ô∏è RESULT: UNKNOWN ‚Äî Popup message kh√¥ng kh·ªõp ƒëi·ªÅu ki·ªán.")
            except PWTimeoutError:
                print("‚ùå FAIL ‚Äî Kh√¥ng th·∫•y popup th√¥ng b√°o trong 10 gi√¢y.")

        finally:
            # ƒê√≥ng page tr∆∞·ªõc ƒë·ªÉ ƒë·∫£m b·∫£o video ƒë∆∞·ª£c flush
            try:
                await page.close()
            except Exception:
                pass

            # L·∫•y ƒë∆∞·ªùng d·∫´n video c·ªßa page (sau khi page ƒë√£ ƒë√≥ng)
            try:
                video_path = await page.video.path()  # type: ignore[attr-defined]
                print(f"\nüé¨ Video ƒë√£ l∆∞u: {video_path}")
            except Exception as e:
                print(f"\n‚ö†Ô∏è Kh√¥ng l·∫•y ƒë∆∞·ª£c ƒë∆∞·ªùng d·∫´n video: {e}")

            await context.close()
            await browser.close()
            print("\nüéØ DONE. Browser closed.")

if __name__ == "__main__":
    asyncio.run(main())
